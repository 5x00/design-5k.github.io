/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 model.gltf
*/

import React, { useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import * as THREE from 'three';

const sizes = {
  width: window.innerWidth,
  height: window.innerHeight
};

const cursor = {
  x: 0,
  y: 0
};

window.addEventListener("mousemove", (event) => {
  cursor.x = event.clientX;
  cursor.y = event.clientY;
});

function scale(number, inMin, inMax, outMin, outMax) {
  return ((number - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin;
}

export default function Model(props) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/model.gltf')
  const { actions } = useAnimations(animations, group)

  materials.teeth.color = new THREE.Color(0x525252);
  materials.eye.color = new THREE.Color(0xdbdbdb);
  materials['horse-base'].roughness = 0.65;

  useFrame((state, delta) => {
    window.addEventListener("click", (event) => {
    });
    actions.default.play();
    nodes.Bonehead.rotation.z = scale(cursor.x, 0, sizes.width, -0.5, 0.5) * -1;
    nodes.Bonehead.rotation.x = scale(cursor.y, 0, sizes.width, 2.0, 3.0);
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" position={[0, -2, -15]} scale={2}>
          <primitive object={nodes.Boneneck} />
          <primitive object={nodes.Bonehead} />
          <skinnedMesh name="eyes" geometry={nodes.eyes.geometry} material={materials.eye} skeleton={nodes.eyes.skeleton} />
          <group name="pony">
            <skinnedMesh name="pony-mesh" geometry={nodes['pony-mesh'].geometry} material={materials['horse-base']} skeleton={nodes['pony-mesh'].skeleton} />
            <skinnedMesh name="pony-mesh_1" geometry={nodes['pony-mesh_1'].geometry} material={materials.braids} skeleton={nodes['pony-mesh_1'].skeleton} />
          </group>
          <skinnedMesh name="teeth" geometry={nodes.teeth.geometry} material={materials.teeth} skeleton={nodes.teeth.skeleton} />
        </group>
        <pointLight name="Point" intensity={0.2} decay={2} position={[4,0,-25]} rotation={[-Math.PI / 2, 0, 0]} />
        <pointLight name="Area002" intensity={0.2} decay={2} position={[-5,0,-30]} rotation={[-1.1, -0.29, -2.08]} scale={5.13} />
        <pointLight name="Area001" intensity={0.2} decay={2} position={[0,20,-15]} rotation={[-3.13, -0.54, -3.14]} scale={5.13} />
        <pointLight name="Area" intensity={0} decay={2} position={[1.08, 3.17, -4.36]} rotation={[-3.06, 0.04, 3.14]} scale={5.13} />
      </group>
    </group>
  )
}

useGLTF.preload('/model.gltf')
